#include <bits/stdc++.h>
using namespace std;

const int N = 1e2 + 5,
dx[] = {1, -1, 0, 0, 0, 0},
dy[] = {0, 0, 1, -1, 0, 0},
dk[] = {0, 0, 0, 0, 1, -1};

struct direction {
    int x, y, z;
};

struct Compare {
    bool operator()(const pair<long long, direction>& a, const pair<long long, direction>& b) {
        return a.first > b.first;
    }
};

int n, a[N][N][N];
long long dist[N][N][N];
priority_queue<pair<long long, direction>, vector<pair<long long, direction>>, Compare> pq;

bool valid(int x, int y, int z) {
    return x > 0 && x <= n && y > 0 && y <= n && z > 0 && z <= n;
}

void dijkstra()
{
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            for(int k = 1; k <= n; k++)
                dist[i][j][k] = 1e18;
    dist[1][1][1] = 0;
    pq.push({0, {1, 1, 1}});

    while(!pq.empty())
    {
        long long cost = pq.top().first;
        direction edge = pq.top().second;
        pq.pop();

        if(cost > dist[edge.x][edge.y][edge.z]) continue;

        for(int s = 0; s < 6; s++) {
            int X = edge.x + dx[s],
                Y = edge.y + dy[s],
                Z = edge.z + dk[s];
            if(valid(X, Y, Z)) {
                long long new_cost = dist[edge.x][edge.y][edge.z] + a[X][Y][Z];
                if (new_cost < dist[X][Y][Z]) {
                    dist[X][Y][Z] = new_cost;
                    pq.push({dist[X][Y][Z], {X, Y, Z}});
                }
            }
        }
    }
}

int32_t main(void)
{
    cin.tie(0) -> sync_with_stdio(false);

    cin >> n;
    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= n; j++)
            for(int k = 1; k <= n; k++)
                cin >> a[i][j][k];

    dijkstra();

    cout << dist[n][n][n];
    return 0;
}
